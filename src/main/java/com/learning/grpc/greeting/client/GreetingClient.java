package com.learning.grpc.greeting.client;
/*
  Created by  : Ribhu Kashyap
  Created on  : 25/06/2020
  Purpose     : Demo of gRPC Unary/Server-Streaming/Client-Streaming call
 */
import com.proto.dummy.DummyServiceGrpc;
import com.proto.greet.*;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

public class GreetingClient {
    public void run(){
        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost",50051)
                .usePlaintext() //Force SSL to be de-activated during development. Not to be done in prod.
                .build();
        //runDummyStub(channel);
        //runUnaryCall(channel);
        //runServerStreamCall(channel);
        runClientStreamCall(channel);

        System.out.println("\nShutting down channel...");
        channel.shutdown();
    }

    private void sendClientStreamMessages(StreamObserver<LongGreetRequest> requestObserver){
        for(int i=1; i<=10; i++){
            System.out.println("Sending Client message = "+i);
            requestObserver.onNext(LongGreetRequest.newBuilder()
                    .setGreeting(Greeting.newBuilder()
                            .setFirstName("Ribhu - "+i)
                            .build())
                    .build());
        }
    }

    private void runDummyStub(ManagedChannel channel){
        System.out.println("\nCreating stub...");

        DummyServiceGrpc.DummyServiceBlockingStub syncClient = DummyServiceGrpc.newBlockingStub(channel);
        DummyServiceGrpc.DummyServiceFutureStub asyncClient = DummyServiceGrpc.newFutureStub(channel);
        //Call APIs if defined. (this is dummy only)
    }

    private void runUnaryCall(ManagedChannel channel){
        // created a greet service client (blocking - synchronous)
        //DummyServiceGrpc.DummyServiceBlockingStub syncClient = DummyServiceGrpc.newBlockingStub(channel);
        GreetServiceGrpc.GreetServiceBlockingStub greetClient = GreetServiceGrpc.newBlockingStub(channel);

        // Unary
        // created a protocol buffer greeting message
        Greeting greeting = Greeting.newBuilder()
                .setFirstName("Ribhu")      //set the fields defined in message Greeting in .proto
                .setLastName("Kashyap")
                .build();

        // created a protocol buffer for a GreetRequest
        GreetRequest greetRequest = GreetRequest.newBuilder()
                .setGreeting(greeting)      //set the message GreetRequest in .proto
                .build();

        // call the RPC and get back a GreetResponse (protocol buffers)
        GreetResponse greetResponse = greetClient.greet(greetRequest);
        /* Note : the above call to greet is an RPC call. The method is
           defined as a service in the greet.proto file. The greet function
           is implemented in the autogenerated code and override by us on
           the GreetServiceImpl (server) and it looks like a plain method call
           but it is actually going over the network. That is the RPC call.
        */
        System.out.println("\n" + greetResponse.getResult());
    }

    private void runServerStreamCall(ManagedChannel channel){
    //Server Streaming

        // created a greet service client (blocking - synchronous)
        GreetServiceGrpc.GreetServiceBlockingStub greetClient = GreetServiceGrpc.newBlockingStub(channel);

        // prepare the request
        GreetManyTimesRequest greetManyTimesRequest = GreetManyTimesRequest.newBuilder()
                .setGreeting(Greeting.newBuilder().setFirstName("Ribhu").setLastName("Kashyap"))
                .build();

        // stream the responses (in a blocking manner)
        greetClient.greetManyTimes(greetManyTimesRequest)
                .forEachRemaining(greetManyTimesResponse -> {
                    System.out.println(greetManyTimesResponse.getResult());
                });
    }

    private void runClientStreamCall(ManagedChannel channel){
        //Client Streaming
        //Create an asynchronous client
        GreetServiceGrpc.GreetServiceStub asyncClient = GreetServiceGrpc.newStub(channel);
        CountDownLatch latch = new CountDownLatch(1);
        StreamObserver<LongGreetRequest> requestObserver =
                asyncClient.longGreet(new StreamObserver<LongGreetResponse>() {
            @Override
            public void onNext(LongGreetResponse value) {
                // we get a response from the server
                System.out.println("\nRESPONSE FROM SERVER - ");
                System.out.println(value.getResult());
                // onNext will be called only once
            }
            @Override
            public void onError(Throwable t) {
                // we get an error from the server
            }
            @Override
            public void onCompleted() {
                // the server is done sending us data
                // onCompleted will be called right after onNext()
                System.out.println("SERVER COMPLETED SENDING");
                latch.countDown();
            }
        });

        // stream 10 messages to the sever
        sendClientStreamMessages(requestObserver);

        // we tell the server that the client is done sending data
        requestObserver.onCompleted();

        try {
            latch.await(3L, TimeUnit.SECONDS);  //latch helps in blocking the execution until server responds
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        System.out.printf("gRPC Client Running...");
        GreetingClient main = new GreetingClient();
        main.run();
    }
}
